// // src/stores/useAuthStore.ts
// import { create } from "zustand";
// import { persist } from "zustand/middleware";

// interface Rol { id: number; nombre: string; }
// interface EstablecimientoConCircuito { id: number | string; nombre: string; circuito?: any; }
// interface UsuarioEstablecimientoLite { establecimiento?: EstablecimientoConCircuito | null; principal?: boolean; }
// interface User {
//   id: string; email: string; nombre: string; apellido: string;
//   avatarUrl?: string; createdAt: string | Date; updatedAt: string | Date;
//   rol: Rol; permisos: string[]; escuelas?: UsuarioEstablecimientoLite[];
// }

// interface AuthState {
//   user: User | null;
//   token: string | null;
//   loading: boolean;
//   hasHydrated: boolean;
//   triedMe: boolean;

//   setUser: (u: User | null) => void;
//   setToken: (token: string | null) => void;

//   setHasHydrated: (b: boolean) => void;
//   setLoading: (b: boolean) => void;

//   fetchUser: () => Promise<void>;
//   logout: () => Promise<void>;

//   reset: () => void;
// }

// export const useAuthStore = create<AuthState>()(
//   persist(
//     (set, get) => ({
//       user: null,
//       token: null,
//       loading: false,
//       hasHydrated: false,
//       triedMe: false,
//       reset: () => set({ user: null, token: null }),
//       setUser: (user) => {
//         console.log("[auth] setUser()", user ? user.email : "null");
//         set({ user });
//       },
//       setToken: (token) => set({ token }),
//       setHasHydrated: (b) => {
//         console.log("[auth] setHasHydrated:", b);
//         set({ hasHydrated: b });
//       },
//       setLoading: (b) => {
//         console.log("[auth] setLoading:", b);
//         set({ loading: b });
//       },

//       fetchUser: async () => {
//         if (get().loading) {
//           console.log("[auth] fetchUser() ya en curso, salgo");
//           return;
//         }
//         console.log("[auth] fetchUser() INICIO");
//         set({ loading: true });

//         try {
//           const token = get().token;
//           console.time("[auth]/me");
//           const res = await fetch("/api/app-auth/me", {
//             method: "GET",
//             credentials: "include",
//             cache: "no-store",
//           });
//           console.timeEnd("[auth]/me");
//           console.log("[auth] /me status:", res.status);

//           if (!res.ok) {
//             const text = await res.text().catch(() => "");
//             console.warn("[auth] /me NO OK body:", text);
//             set({ user: null, loading: false, triedMe: true });
//             return;
//           }

//           const data = await res.json().catch(() => ({} as any));
//           const user = (data?.user ?? data) as User | null;

//           console.log("[auth] /me OK user:", user?.email, "escuelas:", user?.escuelas?.length ?? 0);
//           set({ user: user ?? null, loading: false, triedMe: true });
//         } catch (e: any) {
//           console.error("[auth] /me error:", e?.message);
//           set({ user: null, loading: false, triedMe: true });
//         }
//       },

//       logout: async () => {
//         console.log("[auth] logout()");
//         try {
//           await fetch("/api/app-auth/logout", { method: "POST" }).catch(() => { });
//         } finally {
//           set({ user: null, loading: false, triedMe: true });
//         }
//       },
//     }),
//     {
//       name: "auth-store",
//       partialize: (s) => ({ user: s.user }),
//       onRehydrateStorage: () => (state) => {
//         console.log("[auth] onRehydrateStorage -> arranc√≥");
//         state?.setHasHydrated(true);
//       },
//     }
//   )
// );
